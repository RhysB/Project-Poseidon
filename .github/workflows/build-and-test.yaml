name: build-and-test
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - master
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Set up JDK 1.8
      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8

      # Step 3: Get the version from pom.xml
      - name: Get the version from pom.xml
        id: get_version
        run: echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      # Step 4: Generate custom release version
      - name: Generate Release Version
        id: release_version
        run: |
          DATE=$(date +'%y%m%d-%H%M')
          SHA=$(echo $GITHUB_SHA | cut -c1-7)
          RELEASE_VERSION="${PROJECT_VERSION}-${DATE}-${SHA}"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      # Step 5: Create version.properties file
      - name: Create version.properties file
        run: |
          mkdir -p src/main/resources
          
          # Core Metadata
          echo "version=${{ env.RELEASE_VERSION }}" > src/main/resources/version.properties
          echo "build_timestamp=$(date --utc +'%Y-%m-%dT%H:%M:%SZ')" >> src/main/resources/version.properties
          echo "git_branch=${{ github.ref_name }}" >> src/main/resources/version.properties
          echo "git_commit=${GITHUB_SHA}" >> src/main/resources/version.properties
          
          # Application Information
          echo "app_name=Project Poseidon" >> src/main/resources/version.properties
          echo "release_version=${{ env.RELEASE_VERSION }}" >> src/main/resources/version.properties
          ech0 "maven_version=${{ env.PROJECT_VERSION }}" >> src/main/resources/version.properties
          
          # Build Type
          if [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            BUILD_TYPE="production"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BUILD_TYPE="pull_request"
          else
            BUILD_TYPE="development"
          fi
          echo "build_type=${BUILD_TYPE}" >> src/main/resources/version.properties
          
          # CI/CD Metadata
          echo "workflow_name=${{ github.workflow }}" >> src/main/resources/version.properties
          echo "workflow_run_id=${{ github.run_id }}" >> src/main/resources/version.properties
          echo "workflow_run_number=${{ github.run_number }}" >> src/main/resources/version.properties
          
          # Team or Author Information
          echo "build_author=${{ github.actor }}" >> src/main/resources/version.properties

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.9.1

      # Step 6: Build application
      - name: Build Application
        shell: bash
        run: |
          mvn clean install

      # Step 7: Run Tests
      - name: Run Tests
        shell: bash
        run: |
          mvn test

      # Step 8: Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-artifact
          path: target/*.jar